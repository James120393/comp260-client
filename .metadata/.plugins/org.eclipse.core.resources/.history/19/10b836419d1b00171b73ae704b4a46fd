
import java.io.DataInputStream;
import java.io.PrintStream;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.*;
import java.awt.event.*;

public class TCPClient implements Runnable {

	// The client socket
	private static Socket clientSocket = null;
	// The output stream
	private static PrintStream os = null;
	// The input stream
	private static DataInputStream is = null;

	private static BufferedReader inputLine = null;
	private static boolean closed = false;
	

	public static void main(String[] args) {

		// The default port.
		int portNumber = 25565;
		// The default host.
		String host = "178.62.110.12";

		new Window();

		if (args.length < 2) {
			System.out.println("Usage: java MultiThreadChatClient <host> <portNumber>\n" + "Now using host=" + host
					+ ", portNumber=" + portNumber);
		} else {
			host = args[0];
			portNumber = Integer.valueOf(args[1]).intValue();
		}

		/*
		 * Open a socket on a given host and port. Open input and output
		 * streams.
		 */
		try {
			clientSocket = new Socket(host, portNumber);
			inputLine = new BufferedReader(new InputStreamReader(System.in));
			os = new PrintStream(clientSocket.getOutputStream());
			is = new DataInputStream(clientSocket.getInputStream());
            StringBuffer inputLine = new StringBuffer();
            String tmp; 
            while ((tmp = is.readLine()) != null) {
                inputLine.append(tmp);
                System.out.println(tmp);
                Window.area.setText(tmp);
            }
		} catch (UnknownHostException e) {
			System.err.println("Don't know about host " + host);
		} catch (IOException e) {
			System.err.println("Couldn't get I/O for the connection to the host " + host);
		}
		
		/*
		 * If everything has been initialized then we want to write some data to
		 * the socket we have opened a connection to on the port portNumber.
		 */
		if (clientSocket != null && os != null && is != null) {
			try {

				/* Create a thread to read from the server. */
				new Thread(new TCPClient()).start();
				while (!closed) {
					os.println(inputLine.readLine().trim());
				}
				/*
				 * Close the output stream, close the input stream, close the
				 * socket.
				 */
				os.close();
				is.close();
				clientSocket.close();
			} catch (IOException e) {
				System.err.println("IOException:  " + e);
			}
		}
	}
	
	public static DataInputStream getInputStream()
	{
		return is;
	}
	public static DataInputStream setInputStream()
	{
		return is;
	}
	
	/*
	 * Create a thread to read from the server. (non-Javadoc)
	 * 
	 * @see java.lang.Runnable#run()
	 */		
	
	static String serverResponse = null;
	
	@SuppressWarnings("deprecation")
	public void run() {
		/*
		 * Keep on reading from the socket till we receive "Bye" from the
		 * server. Once we received that then we want to break.
		 */
		String responseLine;
		try {
			while ((responseLine = is.readLine()) != null) {
				System.out.println(responseLine);
				serverResponse = responseLine;
				Window.showResponse();
				if (responseLine.indexOf("*** Bye") != -1)
					break;
			}
			closed = true;
		} catch (IOException e) {
			System.err.println("IOException:  " + e);
		}
	
	}	
	public static String getresponseLine()
		{
			return serverResponse;
		}
}

class Window implements ActionListener {
	static JTextArea responseArea;
	JLabel l2;
	static JTextArea area;
	JButton b;

	Window() {
		JFrame f = new JFrame();
		responseArea = new JTextArea();
		responseArea.setBounds(20, 75, 250, 200);
		l2 = new JLabel();
		l2.setBounds(160, 25, 100, 30);
		area = new JTextArea();
		area.setBounds(20, 75, 250, 200);
		b = new JButton("Submit");
		b.setBounds(100, 300, 120, 30);
		b.addActionListener(this);
		f.add(responseArea);
		f.add(l2);
		f.add(area);
		f.add(b);
		f.setSize(450, 450);
		f.setLayout(null);
		f.setVisible(true);
	}

	public void actionPerformed(ActionEvent e) {
		String text = area.getText();
		String words[] = text.split("\\s");
	}
	
	public static void showResponse()
	{
	responseArea.setText(responseArea.getText() + TCPClient.getresponseLine());
	}
}
